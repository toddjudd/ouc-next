// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  salt          String?
  password      String
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  Jobs          Job[]
  Customers     Customer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id                 String   @id @default(cuid())
  name               String
  type               String
  address            String
  city               String
  state              String
  zip                String
  lat                Float
  lng                Float
  customerRefference String
  estStartDate       DateTime
  dueDate            DateTime
  completeDate       DateTime
  invoicedDate       DateTime
  status             String
  notes              String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  createdBy          User     @relation(fields: [createdById], references: [id])
  createdById        String
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zip         String
  lat         Float
  lng         Float
  phone       String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}
